<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rzymek&#39;s rumblings</title>
    <link>https://rzymek.github.io/</link>
    <description>Recent content on rzymek&#39;s rumblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>rzymek@gmail.com (Krzysiek Rzymkowski)</managingEditor>
    <webMaster>rzymek@gmail.com (Krzysiek Rzymkowski)</webMaster>
    <lastBuildDate>Mon, 03 Dec 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://rzymek.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Excel and ZIP64</title>
      <link>https://rzymek.github.io/post/excel-zip64/</link>
      <pubDate>Mon, 03 Dec 2018 00:00:00 +0000</pubDate>
      <author>rzymek@gmail.com (Krzysiek Rzymkowski)</author>
      <guid>https://rzymek.github.io/post/excel-zip64/</guid>
      <description>TL;DR; Excel has requires specific ZIP flag values in .xlsx that Java&amp;rsquo;s ZIP implementation does not provide when streaming.
Problem with huge XLSX files The standard in Excel file creation in Java is Apache POI. It works fine, a bit slow, but still fine. As it turns out up to some size limit, arbitrary at first sight. You can try it yourself. Just run this piece of code:
try (SXSSFWorkbook wb = new SXSSFWorkbook(new XSSFWorkbook())) { SXSSFSheet sheet = wb.</description>
    </item>
    
    <item>
      <title>Simplest Docker service</title>
      <link>https://rzymek.github.io/post/simple-docker-service/</link>
      <pubDate>Fri, 16 Nov 2018 00:00:00 +0000</pubDate>
      <author>rzymek@gmail.com (Krzysiek Rzymkowski)</author>
      <guid>https://rzymek.github.io/post/simple-docker-service/</guid>
      <description>The Simplest Docker service My first thought when wanting to run a docker container as a system service, was to use docker service. Like this
 docker service create --name nginx -p 80:80 \ --mount type=bind,source=/var/www,destination=/usr/share/nginx/html \ nginx  But this is sometimes an overkill. In case on nginx a much simpler solution would be
docker run --detach --network host \ --restart=always \ -v /var/www:/usr/share/nginx/html:ro \ nginx  It&amp;rsquo;s the way to go, when you just what to have one instance on one specific host.</description>
    </item>
    
    <item>
      <title>Prevent docker from filling up your disk</title>
      <link>https://rzymek.github.io/post/docker-prune/</link>
      <pubDate>Fri, 30 Mar 2018 00:00:00 +0000</pubDate>
      <author>rzymek@gmail.com (Krzysiek Rzymkowski)</author>
      <guid>https://rzymek.github.io/post/docker-prune/</guid>
      <description>Deploying docker container as part of your continuous integration can cause your disk to fill up pretty quick. Docker does reuse the layers that did not change between deployments. But still, that last layer with you .war or .js bundle can take a few hundred megabytes. Taking into account, that you should be deploying a new version of every update of the master branch, this can take up a gigabyte every day.</description>
    </item>
    
    <item>
      <title>What&#39;s so special about docker?</title>
      <link>https://rzymek.github.io/post/what-is-docker/</link>
      <pubDate>Wed, 03 Jan 2018 23:06:14 +0100</pubDate>
      <author>rzymek@gmail.com (Krzysiek Rzymkowski)</author>
      <guid>https://rzymek.github.io/post/what-is-docker/</guid>
      <description>What&amp;rsquo;s so special about docker? There are quite a few comparisons between docker containers and virtual machines on the interwebs. That&amp;rsquo;s exactly what made it more difficult for me to understand what containers actually are. Then I came across the thought that docker is like chroot on steroids. That&amp;rsquo;s it! It&amp;rsquo;s just an isolated process. Not only on the filesystem level, but also all other resources like network and processes.</description>
    </item>
    
    <item>
      <title>Spring Data repository with empty IN clause.</title>
      <link>https://rzymek.github.io/post/jpa-empty-in/</link>
      <pubDate>Sat, 22 Apr 2017 20:45:24 +0200</pubDate>
      <author>rzymek@gmail.com (Krzysiek Rzymkowski)</author>
      <guid>https://rzymek.github.io/post/jpa-empty-in/</guid>
      <description>The problem I&amp;rsquo;ve stabled upon started with a spring data repository like this:
public interface SampleRepository extends CrudRepository&amp;lt;Sample, Integer&amp;gt;{ @Query(&amp;quot;select s from Sample s where s.id in :ids&amp;quot;) List&amp;lt;Sample&amp;gt; queryIn(@Param(&amp;quot;ids&amp;quot;) List&amp;lt;Integer&amp;gt; ids); }  Actual query was of course more complicated that this. Complex enough to justify not using a query method. The problem emerges when you run this method with an empty collection as argument:
repository.queryIn(Collections.emptyList());  The result is database dependent.</description>
    </item>
    
    <item>
      <title>Markdown all the way</title>
      <link>https://rzymek.github.io/post/markdown/</link>
      <pubDate>Mon, 27 Feb 2017 21:53:31 +0100</pubDate>
      <author>rzymek@gmail.com (Krzysiek Rzymkowski)</author>
      <guid>https://rzymek.github.io/post/markdown/</guid>
      <description>I love Markdown. It made me change my mind about writing documentations. Makes it almost pleasant.
Now, whenever I&amp;rsquo;m about to write some content I first look for a tool that lets me do it in markdown. So here&amp;rsquo;s a list of all my makrdown tools.
Marp Let&amp;rsquo;s me create slides in markdown. Clean and simple. Exports to PDF. Works really well for prezentations that include code samples. Higlighting works out of the box.</description>
    </item>
    
    <item>
      <title>Exploaded WAR with Maven and Eclipse</title>
      <link>https://rzymek.github.io/post/exploaded-war/</link>
      <pubDate>Thu, 05 Sep 2013 16:07:00 +0100</pubDate>
      <author>rzymek@gmail.com (Krzysiek Rzymkowski)</author>
      <guid>https://rzymek.github.io/post/exploaded-war/</guid>
      <description>The aim: setup a maven war project and JBoss7/WildFly so that the only thing needed to see your changes is touch my.war.dodeploy and F5 in the browser.
Setting up Maven First thing to do is to setup outputDirectory, so that Eclipse will put the class files instantly in the right place:
&amp;lt;project&amp;gt; &amp;lt;build&amp;gt; &amp;lt;outputDirectory&amp;gt;${basedir}/src/main/webapp/WEB-INF/classes&amp;lt;/outputDirectory&amp;gt; ...  Now you need to update Eclipse .project file:
mvn eclipse:eclipse  If you haven&amp;rsquo;t done that already, now&amp;rsquo;s the time to do File &amp;gt; Import &amp;gt; Existing Projects into Workspace in Eclipse.</description>
    </item>
    
  </channel>
</rss>